// ImageData is a composite type that represents the data from both the
// image record in the database and minio object storage. It includes a

import {
  ALLOWED_IMAGE_FILE_TYPES,
  checkImageDescription,
  checkImageTitle,
} from "@/validation/image_fields";
import { checkUuid } from "@/validation/user_fields";

// signed URL for accessing the image, which is generated by the backend service.
export type ImageData = {
  uuid?: string;
  title?: string;
  description?: string;
  slug?: string;
  width?: number;
  height?: number;
  size?: number;
  image_date?: string;
  created_at?: string;
  updated_at?: string;
  is_archived?: boolean;

  signed_url?: string;
};

export type AddImageCmd = {
  csrf: string | null;

  title: string;
  description: string;
  content_type: string;
  file_size: number;
};

// validate the metadata for the first stage of the image upload
export function validateImageData(data: AddImageCmd) {
  let errors: { [key: string]: string[] } = {};

  // validate csrf token
  if (
    data.csrf &&
    (data.csrf.trim().length < 16 || data.csrf.trim().length > 64)
  ) {
    errors.csrf = [
      "CSRF token is not well formed. This value cannot be edited or tampered with.",
    ];
  }

  // regex csrf check
  const checkCsrf = checkUuid(data.csrf ?? "");
  if (!checkCsrf.isValid) {
    errors.csrf = errors.csrf ?? [];
    errors.csrf.push(...checkCsrf.messages);
  }

  // validate title
  const checkTitle = checkImageTitle(data.title);
  if (!checkTitle.isValid) {
    errors.title = errors.title ?? [];
    errors.title.push(...checkTitle.messages);
  }

  // validate description
  const checkDescription = checkImageDescription(data.description);
  if (!checkDescription.isValid) {
    errors.description = errors.description ?? [];
    errors.description.push(...checkDescription.messages);
  }

  // validate content type
  if (!data.content_type || data.content_type.trim().length === 0) {
    errors.file = errors.file ?? [];
    errors.file.push("Content type is required.");
  }

  if (
    data.content_type &&
    data.content_type.trim().length > 0 &&
    !ALLOWED_IMAGE_FILE_TYPES.includes(data.content_type)
  ) {
    errors.file = errors.file ?? [];
    errors.file.push(
      `Content type must be one of the following: ${ALLOWED_IMAGE_FILE_TYPES.join(
        ", "
      )}.`
    );
  }

  // validate file size
  if (!data.file_size || data.file_size <= 0) {
    errors.file = errors.file ?? [];
    errors.file_size = ["File size is required and must be greater than 0."];
  } else if (data.file_size > 10 * 1024 * 1024) {
    // 10 MB limit
    errors.file = errors.file ?? [];
    errors.file = ["File size must not exceed 10 MB."];
  }

  return errors;
}
